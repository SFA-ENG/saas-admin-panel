import { UploadOutlined } from "@ant-design/icons";
import {
  Button,
  Card,
  Col,
  DatePicker,
  Divider,
  Form,
  Input,
  InputNumber,
  Row,
  Select,
  TimePicker,
  Upload,
} from "antd";
import {
  renderErrorNotifications,
  renderSuccessNotifications,
} from "helpers/error.helpers";
import {
  bloodGroups,
  cities,
  districts,
  events,
  genders,
  locations,
  sports,
  stakeholderTypes,
  states,
  transportModes,
  venues,
} from "pages/StakeHolderAdminstrationPage/UserPage.helper";
import "../../../../../Components/UploadBox/UploadBox.css";
import { uploadImages } from "../../BulkUpload.service";

const IndividualEntry = ({
  form,
  onFinish,
  onFinishFailed,
  onDOBChange,
  loading,
  profileImageList,
  setProfileImageList,
  documentImageList,
  setDocumentImageList,
  hotelsList,
}) => {
  const { Option } = Select;
  const formItemLayout = {
    labelCol: { span: 12 },
    wrapperCol: { span: 16 },
  };

  // Generic function to handle file uploads
  const handleFileUpload = async (file, fieldName) => {
    try {
      // Create FormData
      const formData = new FormData();
      formData.append(fieldName, file);

      // Upload image and get response
      const { data, errors } = await uploadImages({
        formData,
        type: fieldName,
      });

      if (errors && errors.length > 0) {
        renderErrorNotifications(errors?.message || "Error uploading file");
        return null;
      }

      if (data && data.data.file_path) {
        renderSuccessNotifications({
          title: "File uploaded successfully",
          description: `${fieldName} uploaded successfully`,
        });
        // Return the URL from server
        return data.data.file_path;
      }
    } catch (error) {
      console.error("Error in handleFileUpload:", error);
      renderErrorNotifications(error?.message || "Error uploading file");
    }
    return null;
  };

  // Custom upload button
  const uploadButton = (
    <Row>
      <Col span={24}>
        <UploadOutlined />
        <div style={{ marginTop: 8 }}>Upload</div>
      </Col>
    </Row>
  );

  return (
    <Card>
      <Form
        form={form}
        name="stakeholderForm"
        {...formItemLayout}
        onFinish={onFinish}
        onFinishFailed={onFinishFailed}
        scrollToFirstError
        layout="vertical"
      >
        {/* Basic Information */}
        <Divider orientation="left">Basic Information</Divider>
        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="stakeholder_type"
              label="Stakeholder Type"
              rules={[
                {
                  required: true,
                  message: "Please select stakeholder type!",
                },
              ]}
            >
              <Select placeholder="Select stakeholder type">
                {stakeholderTypes.map((type) => (
                  <Option key={type} value={type}>
                    {type}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="stakeholder_uuid" label="System Generated ID">
              <Input disabled placeholder="Auto generated by system" />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="mapped_id"
              label="Mapped ID"
              rules={[{ required: true, message: "Please input mapped ID!" }]}
            >
              <Input placeholder="ID from GTCC System" />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="fullname"
              label="Full Name"
              rules={[{ required: true, message: "Please input name!" }]}
            >
              <Input placeholder="Full Name" />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="gender"
              label="Gender"
              rules={[{ required: true, message: "Please select gender!" }]}
            >
              <Select placeholder="Select gender" options={genders} />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="mobile_no"
              label="Phone Number"
              rules={[
                {
                  required: true,
                  message: "Please enter phone number",
                },
                () => ({
                  validator(_, value) {
                    if (!value || value.length !== 10) {
                      return Promise.reject(
                        new Error("Phone number must be 10 digits")
                      );
                    }
                    return Promise.resolve();
                  },
                }),
              ]}
            >
              <Input
                placeholder="Enter phone number"
                title="mobile_no"
                maxLength={10}
                onKeyDown={(e) => {
                  // Prevent non-numeric input including 'e', '+', '-'
                  if (
                    !/[0-9]/.test(e.key) &&
                    e.key !== "Backspace" &&
                    e.key !== "Delete" &&
                    e.key !== "ArrowLeft" &&
                    e.key !== "ArrowRight" &&
                    e.key !== "Tab"
                  ) {
                    e.preventDefault();
                  }
                }}
                onChange={(e) => {
                  // Remove any non-numeric characters
                  const value = e.target.value.replace(/\D/g, "");
                  e.target.value = value;
                }}
              />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="dob"
              label="Date of Birth"
              rules={[
                {
                  required: true,
                  message: "Please select date of birth!",
                },
              ]}
            >
              <DatePicker
                style={{ width: "100%" }}
                onChange={onDOBChange}
                format="DD-MM-YYYY"
              />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="age" label="Age">
              <InputNumber
                style={{ width: "100%" }}
                min={0}
                max={99}
                disabled
                placeholder="Auto calculated"
              />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="email_id"
              label="Email"
              rules={[
                {
                  type: "email",
                  message: "Please enter a valid email!",
                },
                {
                  required: true,
                  message: "Please enter email address!",
                },
              ]}
            >
              <Input placeholder="Email address" />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="blood_group"
              label="Blood Group"
              rules={[
                { required: true, message: "Please select blood group!" },
              ]}
            >
              <Select placeholder="Select blood group">
                {bloodGroups.map((group) => (
                  <Option key={group} value={group}>
                    {group}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="profile_image"
              label="Profile Image"
              getValueFromEvent={() => {
                // Keep the original field value while uploading
                return form.getFieldValue("profile_image");
              }}
              valuePropName="file"
            >
              <Upload
                name="profile_image"
                accept="image/*"
                listType="picture-card"
                className="receipt-upload-button"
                maxCount={1}
                style={{ width: "100%" }}
                fileList={profileImageList}
                beforeUpload={() => {
                  // Return true to continue the upload flow
                  return true;
                }}
                customRequest={async ({ file, onSuccess, onError }) => {
                  try {
                    // Upload file
                    const url = await handleFileUpload(file, "profile_image");
                    if (url) {
                      // Update form with the new URL
                      form.setFieldsValue({ profile_image: url });
                      onSuccess({ url });
                    } else {
                      onError(new Error("Upload failed"));
                    }
                  } catch (error) {
                    console.error("Error in customRequest:", error);
                    onError(error);
                  }
                }}
                onPreview={(file) => {
                  // For remote files with URL
                  if (file.url) {
                    window.open(file.url, "_blank");
                    return;
                  }

                  // For local files
                  if (file.originFileObj) {
                    const objectUrl = URL.createObjectURL(file.originFileObj);
                    window.open(objectUrl, "_blank");
                  }
                }}
                onChange={(info) => {
                  // Update fileList with status
                  let fileList = [...info.fileList];

                  // Limit to one file
                  fileList = fileList.slice(-1);

                  // Update status based on response
                  fileList = fileList.map((file) => {
                    if (file.response) {
                      file.url = file.response.url;
                    }
                    return file;
                  });

                  // For preview of local files
                  fileList = fileList.map((file) => {
                    if (
                      file.originFileObj &&
                      !file.url &&
                      !file.status !== "error"
                    ) {
                      const url = URL.createObjectURL(file.originFileObj);
                      return { ...file, url };
                    }
                    return file;
                  });

                  setProfileImageList(fileList);
                }}
                onRemove={() => {
                  setProfileImageList([]);
                  form.setFieldsValue({ profile_image: undefined });
                }}
              >
                {profileImageList.length === 0 && uploadButton}
              </Upload>
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="document_image"
              label="Document Image"
              getValueFromEvent={() => {
                // Keep the original field value while uploading
                return form.getFieldValue("document_image");
              }}
              valuePropName="file"
            >
              <Upload
                name="document_image"
                accept="image/*"
                listType="picture-card"
                className="receipt-upload-button"
                maxCount={1}
                fileList={documentImageList}
                beforeUpload={() => {
                  // Return true to continue the upload flow
                  return true;
                }}
                customRequest={async ({ file, onSuccess, onError }) => {
                  try {
                    // Upload file
                    const url = await handleFileUpload(file, "document_image");
                    if (url) {
                      // Update form with the new URL
                      form.setFieldsValue({ document_image: url });
                      onSuccess({ url });
                    } else {
                      onError(new Error("Upload failed"));
                    }
                  } catch (error) {
                    console.error("Error in customRequest:", error);
                    onError(error);
                  }
                }}
                onPreview={(file) => {
                  // For remote files with URL
                  if (file.url) {
                    window.open(file.url, "_blank");
                    return;
                  }

                  // For local files
                  if (file.originFileObj) {
                    const objectUrl = URL.createObjectURL(file.originFileObj);
                    window.open(objectUrl, "_blank");
                  }
                }}
                onChange={(info) => {
                  // Update fileList with status
                  let fileList = [...info.fileList];

                  // Limit to one file
                  fileList = fileList.slice(-1);

                  // Update status based on response
                  fileList = fileList.map((file) => {
                    if (file.response) {
                      file.url = file.response.url;
                    }
                    return file;
                  });

                  // For preview of local files
                  fileList = fileList.map((file) => {
                    if (
                      file.originFileObj &&
                      !file.url &&
                      !file.status !== "error"
                    ) {
                      const url = URL.createObjectURL(file.originFileObj);
                      return { ...file, url };
                    }
                    return file;
                  });

                  setDocumentImageList(fileList);
                }}
                onRemove={() => {
                  setDocumentImageList([]);
                  form.setFieldsValue({ document_image: undefined });
                }}
              >
                {documentImageList.length === 0 && uploadButton}
              </Upload>
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="designation" label="Designation">
              <Input placeholder="Designation" />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="sports" label="Sports">
              <Select
                placeholder="Select sports"
                allowClear
                options={sports.map((sport) => ({
                  label: sport,
                  value: sport,
                }))}
              />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="team_id" label="Team ID">
              <Input placeholder="Only for team sports" />
            </Form.Item>
          </Col>
        </Row>

        {/* Location Information */}
        <Divider orientation="left">Location Information</Divider>
        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="state" label="State">
              <Select placeholder="Select state">
                {states.map((state) => (
                  <Option key={state} value={state}>
                    {state}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="city" label="City">
              <Select placeholder="Select city">
                {cities.map((city) => (
                  <Option key={city} value={city}>
                    {city}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="venue" label="Venue">
              <Select placeholder="Select venue">
                {venues.map((venue) => (
                  <Option key={venue} value={venue}>
                    {venue}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="event" label="Event">
              <Select placeholder="Select event">
                {events.map((event) => (
                  <Option key={event} value={event}>
                    {event}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
        </Row>

        {/* Arrival Information */}
        <Divider orientation="left">Arrival Information</Divider>
        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="arrival_date" label="Arrival Date">
              <DatePicker style={{ width: "100%" }} />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="arrival_time" label="Arrival Time">
              <TimePicker style={{ width: "100%" }} format="HH:mm:ss" />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="arrival_district" label="Arrival District">
              <Select placeholder="Select district">
                {districts.map((district) => (
                  <Option key={district} value={district}>
                    {district}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="arrival_location" label="Arrival Location">
              <Select placeholder="Select location">
                {locations.map((location) => (
                  <Option key={location} value={location}>
                    {location}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="arrival_mode_of_transport"
              label="Arrival Mode of Transport"
            >
              <Select placeholder="Select mode of transport">
                {transportModes.map((mode) => (
                  <Option key={mode} value={mode}>
                    {mode}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="arrival_transport_details"
              label="Arrival Transport Details"
            >
              <Input placeholder="Flight number, train number etc." />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="arrival_contact_person_name"
              label="Arrival Contact Person Name"
            >
              <Input placeholder="Contact person name" />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="arrival_contact_person_mobile_no"
              label="Arrival Contact Person Phone"
              rules={[
                {
                  pattern: /^\d{10}$/,
                  message: "Please enter a valid 10 digit phone number!",
                },
              ]}
            >
              <Input placeholder="10 digit phone number" maxLength={10} />
            </Form.Item>
          </Col>
        </Row>

        {/* Departure Information */}
        <Divider orientation="left">Departure Information</Divider>
        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="departure_date" label="Departure Date">
              <DatePicker style={{ width: "100%" }} />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="departure_time" label="Departure Time">
              <TimePicker
                style={{ width: "100%" }}
                format="HH:mm:ss"
                showSecond={false}
              />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="departure_district" label="Departure District">
              <Select placeholder="Select district">
                {districts.map((district) => (
                  <Option key={district} value={district}>
                    {district}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="departure_location" label="Departure Location">
              <Select placeholder="Select location">
                {locations.map((location) => (
                  <Option key={location} value={location}>
                    {location}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="departure_mode_of_transport"
              label="Departure Mode of Transport"
            >
              <Select placeholder="Select mode of transport">
                {transportModes.map((mode) => (
                  <Option key={mode} value={mode}>
                    {mode}
                  </Option>
                ))}
              </Select>
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="departure_transport_details"
              label="Departure Transport Details"
            >
              <Input placeholder="Flight number, train number etc." />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="departure_contact_person_name"
              label="Departure Contact Person Name"
            >
              <Input placeholder="Contact person name" />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="departure_contact_person_mobile_no"
              label="Departure Contact Person Phone"
              rules={[
                {
                  pattern: /^\d{10}$/,
                  message: "Please enter a valid 10 digit phone number!",
                },
              ]}
            >
              <Input placeholder="10 digit phone number" maxLength={10} />
            </Form.Item>
          </Col>
        </Row>

        {/* Hotel Information */}
        <Divider orientation="left">Hotel Information</Divider>
        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="hotel_id" label="Hotel Mapped">
              <Select
                placeholder="Select hotel"
                showSearch
                filterOption={(input, option) =>
                  option.label.toLowerCase().includes(input.toLowerCase())
                }
                options={hotelsList.map((hotel) => ({
                  label: hotel.name,
                  value: hotel.id,
                }))}
                onChange={(value) => {
                  const hotel = hotelsList.find((hotel) => hotel.id === value);
                  form.setFieldsValue({
                    hotel_address: hotel.address,
                    hotel_location: hotel.map_location,
                    hotel_manager_name: hotel.manager_name,
                    hotel_manager_mobile_no: hotel.mobile_no,
                  });
                }}
              />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="check_in_date" label="Check-in Date">
              <DatePicker style={{ width: "100%" }} />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="check_out_date" label="Check-out Date">
              <DatePicker style={{ width: "100%" }} />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="hotel_address" label="Hotel Address">
              <Input.TextArea disabled rows={2} placeholder="Hotel address" />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="hotel_location" label="Hotel Location">
              <Input disabled placeholder="Map location" />
            </Form.Item>
          </Col>
          <Col xs={24} sm={12} md={8}>
            <Form.Item name="hotel_manager_name" label="Hotel Manager Name">
              <Input disabled placeholder="Hotel manager name" />
            </Form.Item>
          </Col>
        </Row>

        <Row gutter={16}>
          <Col xs={24} sm={12} md={8}>
            <Form.Item
              name="hotel_manager_mobile_no"
              label="Hotel Manager Number"
              rules={[
                {
                  pattern: /^\d{10}$/,
                  message: "Please enter a valid 10 digit phone number!",
                },
              ]}
            >
              <Input
                disabled
                placeholder="10 digit phone number"
                maxLength={10}
              />
            </Form.Item>
          </Col>
        </Row>

        <Form.Item
          wrapperCol={{ span: 24 }}
          style={{ textAlign: "right", marginTop: 24 }}
        >
          <Button
            type="primary"
            htmlType="submit"
            loading={loading}
            disabled={loading}
          >
            Submit
          </Button>
          <Button
            style={{ marginLeft: 8 }}
            onClick={() => form.resetFields()}
            disabled={loading}
          >
            Reset
          </Button>
        </Form.Item>
      </Form>
    </Card>
  );
};

export default IndividualEntry;
